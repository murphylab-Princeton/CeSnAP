function [Layout,info, filePD, ResultPD] = initiateTrainingNewCNN(Layout, info, filePD, ResultPD)
if isfield(filePD, 'my_imds')
%% ------------------------------------------------------------------------
[filePD.my_imdsTrain,filePD.my_imdsValidation, filePD.my_imdsTest] = splitEachLabel(filePD.my_imds,0.75,0.1,'randomize');

augmenterSS = imageDataAugmenter( 'RandXReflection', true, 'RandYReflection', true, 'RandRotation', [-45 45]);
filePD.my_imdsTrain_aug = augmentedImageDatastore([128 128 1], filePD.my_imdsTrain ,'DataAugmentation',augmenterSS);
filePD.my_imdsValidation_aug = augmentedImageDatastore([128 128 1], filePD.my_imdsValidation ,'DataAugmentation',augmenterSS);

myLayers = [
    imageInputLayer([128 128 1], 'Name','myImageInput')
    convolution2dLayer(3,16,'Padding',[2 2 2 2], 'NumChannels', 1,'Name','conv_1')
    batchNormalizationLayer('Name','BN_1')
    reluLayer('Name','relu_1')
    maxPooling2dLayer(3,'Stride',2, 'Padding', [0 0 0 0], 'Name', 'maxpool_1')
    convolution2dLayer(3,32,'Padding',[0 0 0 0], 'Stride',[2 2],'NumChannels', 16, 'Name','conv_2')
    maxPooling2dLayer(2,'Stride',2, 'Padding',[0 0 0 0], 'Name','maxpool_2')
    batchNormalizationLayer('Name', 'BN_2')
    reluLayer('Name', 'relu_2')
    convolution2dLayer(3,64,'Padding',[1 1 1 1], 'Stride',[1 1],'NumChannels', 32, 'Name', 'conv_3')
    batchNormalizationLayer('Name', 'batchnorm')
    reluLayer('Name', 'relu_3')
    fullyConnectedLayer(100, 'Name', 'fc_1')
    dropoutLayer(0.25, 'Name', 'dropout')
    fullyConnectedLayer(100, 'Name', 'fc_2')
    fullyConnectedLayer(5, 'Name', 'fc_3')
    softmaxLayer('Name', 'softmax')
    classificationLayer('Name', 'classoutput')];


myOptions = trainingOptions('sgdm', ...
    'Momentum', 0.9000, ...
    'InitialLearnRate',0.005, ...
    'LearnRateSchedule', 'none', ...
    'LearnRateDropFactor', 0.1000, ...
    'LearnRateDropPeriod', 10, ...
    'L2Regularization', 1.0000e-04, ...
    'GradientThresholdMethod', 'l2norm', ...
    'GradientThreshold', Inf, ...
    'MaxEpochs',50, ...
    'MiniBatchSize', 256, ...
    'Verbose', 1, ...
    'VerboseFrequency', 50, ...
    'ValidationData', filePD.my_imdsValidation_aug, ...
    'ValidationFrequency', 50, ...
    'ValidationPatience', Inf, ...
    'Shuffle','every-epoch', ...
    'ExecutionEnvironment', 'auto', ...
    'Plots', 'training-progress', ...
    'SequenceLength', 'longest', ...
    'SequencePaddingValue', 0, ...
    'SequencePaddingDirection', 'right', ...
    'DispatchInBackground', 0, ...
    'ResetInputNormalization' ,1);

    ResultPD.salmanNet = trainNetwork(filePD.my_imdsTrain_aug,myLayers,myOptions);
%%-------------------------------------------------------------------------
end
end